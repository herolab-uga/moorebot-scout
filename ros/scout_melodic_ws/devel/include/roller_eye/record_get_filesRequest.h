// Generated by gencpp from file roller_eye/record_get_filesRequest.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_RECORD_GET_FILESREQUEST_H
#define ROLLER_EYE_MESSAGE_RECORD_GET_FILESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct record_get_filesRequest_
{
  typedef record_get_filesRequest_<ContainerAllocator> Type;

  record_get_filesRequest_()
    : type(0)
    , id()
    , start(0)
    , size(0)  {
    }
  record_get_filesRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , id(_alloc)
    , start(0)
    , size(0)  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef int32_t _start_type;
  _start_type start;

   typedef int32_t _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::roller_eye::record_get_filesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::record_get_filesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct record_get_filesRequest_

typedef ::roller_eye::record_get_filesRequest_<std::allocator<void> > record_get_filesRequest;

typedef boost::shared_ptr< ::roller_eye::record_get_filesRequest > record_get_filesRequestPtr;
typedef boost::shared_ptr< ::roller_eye::record_get_filesRequest const> record_get_filesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::record_get_filesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::record_get_filesRequest_<ContainerAllocator1> & lhs, const ::roller_eye::record_get_filesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.id == rhs.id &&
    lhs.start == rhs.start &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::record_get_filesRequest_<ContainerAllocator1> & lhs, const ::roller_eye::record_get_filesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::record_get_filesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::record_get_filesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::record_get_filesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f598a3600f6b7e4727ee537fd0c27ab3";
  }

  static const char* value(const ::roller_eye::record_get_filesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf598a3600f6b7e47ULL;
  static const uint64_t static_value2 = 0x27ee537fd0c27ab3ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/record_get_filesRequest";
  }

  static const char* value(const ::roller_eye::record_get_filesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# snapshot or record\n"
"int8 type\n"
"string id\n"
"int32 start\n"
"int32 size\n"
;
  }

  static const char* value(const ::roller_eye::record_get_filesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.id);
      stream.next(m.start);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct record_get_filesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::record_get_filesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::record_get_filesRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "start: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start);
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_RECORD_GET_FILESREQUEST_H
