// Generated by gencpp from file roller_eye/alexskill.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_ALEXSKILL_H
#define ROLLER_EYE_MESSAGE_ALEXSKILL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct alexskill_
{
  typedef alexskill_<ContainerAllocator> Type;

  alexskill_()
    : cmd(0)
    , dist(0.0)
    , vx(0.0)
    , vy(0.0)
    , w(0.0)  {
    }
  alexskill_(const ContainerAllocator& _alloc)
    : cmd(0)
    , dist(0.0)
    , vx(0.0)
    , vy(0.0)
    , w(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _cmd_type;
  _cmd_type cmd;

   typedef float _dist_type;
  _dist_type dist;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _w_type;
  _w_type w;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ALEX_S_TURNLEFT)
  #undef ALEX_S_TURNLEFT
#endif
#if defined(_WIN32) && defined(ALEX_S_TURNRIGHT)
  #undef ALEX_S_TURNRIGHT
#endif
#if defined(_WIN32) && defined(ALEX_S_MOVELEFT)
  #undef ALEX_S_MOVELEFT
#endif
#if defined(_WIN32) && defined(ALEX_S_MOVERIGHT)
  #undef ALEX_S_MOVERIGHT
#endif
#if defined(_WIN32) && defined(ALEX_S_MOVEFORWARD)
  #undef ALEX_S_MOVEFORWARD
#endif
#if defined(_WIN32) && defined(ALEX_S_MOVEBACKWARD)
  #undef ALEX_S_MOVEBACKWARD
#endif
#if defined(_WIN32) && defined(ALEX_S_CLOCKWISEROTATE)
  #undef ALEX_S_CLOCKWISEROTATE
#endif
#if defined(_WIN32) && defined(ALEX_S_COUNTERCLOCKROTATE)
  #undef ALEX_S_COUNTERCLOCKROTATE
#endif

  enum {
    ALEX_S_TURNLEFT = 0,
    ALEX_S_TURNRIGHT = 1,
    ALEX_S_MOVELEFT = 2,
    ALEX_S_MOVERIGHT = 3,
    ALEX_S_MOVEFORWARD = 4,
    ALEX_S_MOVEBACKWARD = 5,
    ALEX_S_CLOCKWISEROTATE = 6,
    ALEX_S_COUNTERCLOCKROTATE = 7,
  };


  typedef boost::shared_ptr< ::roller_eye::alexskill_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::alexskill_<ContainerAllocator> const> ConstPtr;

}; // struct alexskill_

typedef ::roller_eye::alexskill_<std::allocator<void> > alexskill;

typedef boost::shared_ptr< ::roller_eye::alexskill > alexskillPtr;
typedef boost::shared_ptr< ::roller_eye::alexskill const> alexskillConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::alexskill_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::alexskill_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::alexskill_<ContainerAllocator1> & lhs, const ::roller_eye::alexskill_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.dist == rhs.dist &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.w == rhs.w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::alexskill_<ContainerAllocator1> & lhs, const ::roller_eye::alexskill_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::alexskill_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::alexskill_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::alexskill_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::alexskill_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::alexskill_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::alexskill_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::alexskill_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1709b62875f0d4583ac2cce6d24340c8";
  }

  static const char* value(const ::roller_eye::alexskill_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1709b62875f0d458ULL;
  static const uint64_t static_value2 = 0x3ac2cce6d24340c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::alexskill_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/alexskill";
  }

  static const char* value(const ::roller_eye::alexskill_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::alexskill_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#alex skill command\n"
"#0-turn left 1-turn right 2-move left 3-move right 4-move forward \n"
"#5-move bacward 6-clockwise rotate 7-counterclockwise rotate\n"
"#error and ok\n"
"int8 ALEX_S_TURNLEFT                              = 0\n"
"int8 ALEX_S_TURNRIGHT                           = 1\n"
"int8 ALEX_S_MOVELEFT                              = 2\n"
"int8 ALEX_S_MOVERIGHT                           = 3\n"
"int8 ALEX_S_MOVEFORWARD                   = 4\n"
"int8 ALEX_S_MOVEBACKWARD                = 5\n"
"int8 ALEX_S_CLOCKWISEROTATE           = 6\n"
"int8 ALEX_S_COUNTERCLOCKROTATE = 7\n"
"\n"
"uint32 cmd\n"
"\n"
"#motion distance\n"
"float32 dist\n"
"\n"
"#x velocity\n"
"float32 vx\n"
"\n"
"#y velocity\n"
"float32 vy\n"
"\n"
"#Rotationl Speed\n"
"float32 w\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::roller_eye::alexskill_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::alexskill_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.dist);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct alexskill_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::alexskill_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::alexskill_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_ALEXSKILL_H
