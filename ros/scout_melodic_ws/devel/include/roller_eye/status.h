// Generated by gencpp from file roller_eye/status.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_STATUS_H
#define ROLLER_EYE_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct status_
{
  typedef status_<ContainerAllocator> Type;

  status_()
    : status()  {
    }
  status_(const ContainerAllocator& _alloc)
    : status(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PROCESS_OK)
  #undef PROCESS_OK
#endif
#if defined(_WIN32) && defined(PROCESS_ERROR)
  #undef PROCESS_ERROR
#endif
#if defined(_WIN32) && defined(OBJ_DETECT_CHARGE)
  #undef OBJ_DETECT_CHARGE
#endif
#if defined(_WIN32) && defined(RECORD_START)
  #undef RECORD_START
#endif
#if defined(_WIN32) && defined(RECORD_STOP)
  #undef RECORD_STOP
#endif
#if defined(_WIN32) && defined(RECORD_ERROR)
  #undef RECORD_ERROR
#endif
#if defined(_WIN32) && defined(P2P_AV_PLAYING)
  #undef P2P_AV_PLAYING
#endif
#if defined(_WIN32) && defined(P2P_AV_STOP)
  #undef P2P_AV_STOP
#endif
#if defined(_WIN32) && defined(P2P_AV_ERROR)
  #undef P2P_AV_ERROR
#endif
#if defined(_WIN32) && defined(WIFI_MODE_AP)
  #undef WIFI_MODE_AP
#endif
#if defined(_WIN32) && defined(WIFI_MODE_STA)
  #undef WIFI_MODE_STA
#endif
#if defined(_WIN32) && defined(WIFI_STATUS_DISCONNECT)
  #undef WIFI_STATUS_DISCONNECT
#endif
#if defined(_WIN32) && defined(WIFI_STATUS_CONNECTED)
  #undef WIFI_STATUS_CONNECTED
#endif
#if defined(_WIN32) && defined(WIFI_STATUS_CONNECTING)
  #undef WIFI_STATUS_CONNECTING
#endif
#if defined(_WIN32) && defined(WIFI_STATUS_WRONG_KEY)
  #undef WIFI_STATUS_WRONG_KEY
#endif
#if defined(_WIN32) && defined(WIFI_STATUS_CONN_FAIL)
  #undef WIFI_STATUS_CONN_FAIL
#endif
#if defined(_WIN32) && defined(WIFI_STATUS_STOP)
  #undef WIFI_STATUS_STOP
#endif
#if defined(_WIN32) && defined(BACK_UP_DETECT)
  #undef BACK_UP_DETECT
#endif
#if defined(_WIN32) && defined(BACK_UP_ALIGN)
  #undef BACK_UP_ALIGN
#endif
#if defined(_WIN32) && defined(BACK_UP_BACK)
  #undef BACK_UP_BACK
#endif
#if defined(_WIN32) && defined(BACK_UP_SUCCESS)
  #undef BACK_UP_SUCCESS
#endif
#if defined(_WIN32) && defined(BACK_UP_FAIL)
  #undef BACK_UP_FAIL
#endif
#if defined(_WIN32) && defined(BACK_UP_INACTIVE)
  #undef BACK_UP_INACTIVE
#endif
#if defined(_WIN32) && defined(BACK_UP_CANCEL)
  #undef BACK_UP_CANCEL
#endif
#if defined(_WIN32) && defined(BACK_UP_REDETECT)
  #undef BACK_UP_REDETECT
#endif
#if defined(_WIN32) && defined(BATTERY_CHARGING)
  #undef BATTERY_CHARGING
#endif
#if defined(_WIN32) && defined(BATTERY_UNCHARGE)
  #undef BATTERY_UNCHARGE
#endif
#if defined(_WIN32) && defined(BATTERY_FULL)
  #undef BATTERY_FULL
#endif
#if defined(_WIN32) && defined(BATTERY_UNKOWN)
  #undef BATTERY_UNKOWN
#endif

  enum {
    PROCESS_OK = 0,
    PROCESS_ERROR = -1,
    OBJ_DETECT_CHARGE = 1,
    RECORD_START = 1,
    RECORD_STOP = 2,
    RECORD_ERROR = 3,
    P2P_AV_PLAYING = 1,
    P2P_AV_STOP = 2,
    P2P_AV_ERROR = 3,
    WIFI_MODE_AP = 0,
    WIFI_MODE_STA = 1,
    WIFI_STATUS_DISCONNECT = 0,
    WIFI_STATUS_CONNECTED = 1,
    WIFI_STATUS_CONNECTING = 2,
    WIFI_STATUS_WRONG_KEY = 3,
    WIFI_STATUS_CONN_FAIL = 4,
    WIFI_STATUS_STOP = 5,
    BACK_UP_DETECT = 1,
    BACK_UP_ALIGN = 2,
    BACK_UP_BACK = 3,
    BACK_UP_SUCCESS = 4,
    BACK_UP_FAIL = 5,
    BACK_UP_INACTIVE = 6,
    BACK_UP_CANCEL = 7,
    BACK_UP_REDETECT = 8,
    BATTERY_CHARGING = 0,
    BATTERY_UNCHARGE = 1,
    BATTERY_FULL = 2,
    BATTERY_UNKOWN = 3,
  };


  typedef boost::shared_ptr< ::roller_eye::status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::status_<ContainerAllocator> const> ConstPtr;

}; // struct status_

typedef ::roller_eye::status_<std::allocator<void> > status;

typedef boost::shared_ptr< ::roller_eye::status > statusPtr;
typedef boost::shared_ptr< ::roller_eye::status const> statusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::status_<ContainerAllocator1> & lhs, const ::roller_eye::status_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::status_<ContainerAllocator1> & lhs, const ::roller_eye::status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6919a5b3f28e39f677c7c81d4e5a2ef4";
  }

  static const char* value(const ::roller_eye::status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6919a5b3f28e39f6ULL;
  static const uint64_t static_value2 = 0x77c7c81d4e5a2ef4ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/status";
  }

  static const char* value(const ::roller_eye::status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#error and ok\n"
"int8 PROCESS_OK=0\n"
"int8 PROCESS_ERROR=-1\n"
"\n"
"\n"
"#const for object detecting\n"
"int8 OBJ_DETECT_CHARGE=1\n"
"\n"
"\n"
"#const for recording\n"
"int8 RECORD_START=1\n"
"int8 RECORD_STOP=2\n"
"int8 RECORD_ERROR=3\n"
"\n"
"\n"
"\n"
"#const for p2p av module\n"
"int8 P2P_AV_PLAYING=1\n"
"int8 P2P_AV_STOP=2\n"
"int8 P2P_AV_ERROR=3\n"
"\n"
"#const define for wifi\n"
"int8 WIFI_MODE_AP=0\n"
"int8 WIFI_MODE_STA=1\n"
"\n"
"int8 WIFI_STATUS_DISCONNECT=0\n"
"int8 WIFI_STATUS_CONNECTED=1\n"
"int8 WIFI_STATUS_CONNECTING=2\n"
"int8 WIFI_STATUS_WRONG_KEY=3\n"
"int8 WIFI_STATUS_CONN_FAIL=4\n"
"int8 WIFI_STATUS_STOP=5\n"
"\n"
"int8 BACK_UP_DETECT=1\n"
"int8 BACK_UP_ALIGN=2\n"
"int8 BACK_UP_BACK=3\n"
"int8 BACK_UP_SUCCESS=4\n"
"int8 BACK_UP_FAIL=5\n"
"int8 BACK_UP_INACTIVE=6\n"
"int8 BACK_UP_CANCEL=7\n"
"int8 BACK_UP_REDETECT=8\n"
"\n"
"int8 BATTERY_CHARGING=0\n"
"int8 BATTERY_UNCHARGE=1\n"
"int8 BATTERY_FULL=2\n"
"int8 BATTERY_UNKOWN=3\n"
"\n"
"#msg define\n"
"int32[]  status\n"
;
  }

  static const char* value(const ::roller_eye::status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::status_<ContainerAllocator>& v)
  {
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_STATUS_H
