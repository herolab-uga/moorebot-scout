// Generated by gencpp from file roller_eye/record.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_RECORD_H
#define ROLLER_EYE_MESSAGE_RECORD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct record_
{
  typedef record_<ContainerAllocator> Type;

  record_()
    : id()
    , name()
    , dur(0)
    , type(0)
    , create()
    , size(0)  {
    }
  record_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , name(_alloc)
    , dur(0)
    , type(0)
    , create()
    , size(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint32_t _dur_type;
  _dur_type dur;

   typedef int8_t _type_type;
  _type_type type;

   typedef ros::Time _create_type;
  _create_type create;

   typedef uint32_t _size_type;
  _size_type size;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RECORD_TYPE_ALL)
  #undef RECORD_TYPE_ALL
#endif
#if defined(_WIN32) && defined(RECORD_TYPE_SNAPSHOT)
  #undef RECORD_TYPE_SNAPSHOT
#endif
#if defined(_WIN32) && defined(RECORD_TYPE_RECORD)
  #undef RECORD_TYPE_RECORD
#endif
#if defined(_WIN32) && defined(RECORD_TYPE_THUMB)
  #undef RECORD_TYPE_THUMB
#endif
#if defined(_WIN32) && defined(RECORD_TYPE_SCHED_RECORD)
  #undef RECORD_TYPE_SCHED_RECORD
#endif

  enum {
    RECORD_TYPE_ALL = 0,
    RECORD_TYPE_SNAPSHOT = 1,
    RECORD_TYPE_RECORD = 2,
    RECORD_TYPE_THUMB = 3,
    RECORD_TYPE_SCHED_RECORD = 4,
  };


  typedef boost::shared_ptr< ::roller_eye::record_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::record_<ContainerAllocator> const> ConstPtr;

}; // struct record_

typedef ::roller_eye::record_<std::allocator<void> > record;

typedef boost::shared_ptr< ::roller_eye::record > recordPtr;
typedef boost::shared_ptr< ::roller_eye::record const> recordConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::record_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::record_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::record_<ContainerAllocator1> & lhs, const ::roller_eye::record_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.dur == rhs.dur &&
    lhs.type == rhs.type &&
    lhs.create == rhs.create &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::record_<ContainerAllocator1> & lhs, const ::roller_eye::record_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::record_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::record_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::record_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::record_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::record_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::record_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::record_<ContainerAllocator> >
{
  static const char* value()
  {
    return "544f18c422ce92fad9c49fbb341e07c5";
  }

  static const char* value(const ::roller_eye::record_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x544f18c422ce92faULL;
  static const uint64_t static_value2 = 0xd9c49fbb341e07c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::record_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/record";
  }

  static const char* value(const ::roller_eye::record_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::record_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 RECORD_TYPE_ALL=0\n"
"int8 RECORD_TYPE_SNAPSHOT=1\n"
"int8 RECORD_TYPE_RECORD=2\n"
"int8 RECORD_TYPE_THUMB=3\n"
"int8 RECORD_TYPE_SCHED_RECORD=4\n"
"\n"
"#record file descriptor\n"
"string id\n"
"string name\n"
"uint32 dur\n"
"int8 type\n"
"time create\n"
"uint32 size\n"
;
  }

  static const char* value(const ::roller_eye::record_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::record_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.dur);
      stream.next(m.type);
      stream.next(m.create);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct record_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::record_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::record_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "dur: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dur);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "create: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.create);
    s << indent << "size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_RECORD_H
