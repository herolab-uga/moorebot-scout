// Generated by gencpp from file roller_eye/nav_list_pathResponse.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_NAV_LIST_PATHRESPONSE_H
#define ROLLER_EYE_MESSAGE_NAV_LIST_PATHRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct nav_list_pathResponse_
{
  typedef nav_list_pathResponse_<ContainerAllocator> Type;

  nav_list_pathResponse_()
    : path_list()
    , size_list()
    , create_time_list()
    , name_list()  {
    }
  nav_list_pathResponse_(const ContainerAllocator& _alloc)
    : path_list(_alloc)
    , size_list(_alloc)
    , create_time_list(_alloc)
    , name_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _path_list_type;
  _path_list_type path_list;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _size_list_type;
  _size_list_type size_list;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _create_time_list_type;
  _create_time_list_type create_time_list;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_list_type;
  _name_list_type name_list;





  typedef boost::shared_ptr< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct nav_list_pathResponse_

typedef ::roller_eye::nav_list_pathResponse_<std::allocator<void> > nav_list_pathResponse;

typedef boost::shared_ptr< ::roller_eye::nav_list_pathResponse > nav_list_pathResponsePtr;
typedef boost::shared_ptr< ::roller_eye::nav_list_pathResponse const> nav_list_pathResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::nav_list_pathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::nav_list_pathResponse_<ContainerAllocator1> & lhs, const ::roller_eye::nav_list_pathResponse_<ContainerAllocator2> & rhs)
{
  return lhs.path_list == rhs.path_list &&
    lhs.size_list == rhs.size_list &&
    lhs.create_time_list == rhs.create_time_list &&
    lhs.name_list == rhs.name_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::nav_list_pathResponse_<ContainerAllocator1> & lhs, const ::roller_eye::nav_list_pathResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09857f8ab43e3dd303b36715eecbde30";
  }

  static const char* value(const ::roller_eye::nav_list_pathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09857f8ab43e3dd3ULL;
  static const uint64_t static_value2 = 0x03b36715eecbde30ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/nav_list_pathResponse";
  }

  static const char* value(const ::roller_eye::nav_list_pathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] path_list\n"
"int32[] size_list\n"
"string[] create_time_list\n"
"string[] name_list\n"
;
  }

  static const char* value(const ::roller_eye::nav_list_pathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_list);
      stream.next(m.size_list);
      stream.next(m.create_time_list);
      stream.next(m.name_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nav_list_pathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::nav_list_pathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::nav_list_pathResponse_<ContainerAllocator>& v)
  {
    s << indent << "path_list[]" << std::endl;
    for (size_t i = 0; i < v.path_list.size(); ++i)
    {
      s << indent << "  path_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.path_list[i]);
    }
    s << indent << "size_list[]" << std::endl;
    for (size_t i = 0; i < v.size_list.size(); ++i)
    {
      s << indent << "  size_list[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.size_list[i]);
    }
    s << indent << "create_time_list[]" << std::endl;
    for (size_t i = 0; i < v.create_time_list.size(); ++i)
    {
      s << indent << "  create_time_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.create_time_list[i]);
    }
    s << indent << "name_list[]" << std::endl;
    for (size_t i = 0; i < v.name_list.size(); ++i)
    {
      s << indent << "  name_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_NAV_LIST_PATHRESPONSE_H
