# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roller_eye/detect.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class detect(genpy.Message):
  _md5sum = "8a1e00202f115f18d1fa580d7c9f1bc3"
  _type = "roller_eye/detect"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#0.5: 1 nose [122.382, 483.588, 157.864, 566.004]
#0.5: 2 eye [294.182, 447.601, 339.913, 530.017]

uint32 seq
float32 score
int32 index
 #object name
string name

#img size
int32 width
int32 height

#the position
float32 top
float32 left
float32 bottom
float32 right
uint64 stamp"""
  __slots__ = ['seq','score','index','name','width','height','top','left','bottom','right','stamp']
  _slot_types = ['uint32','float32','int32','string','int32','int32','float32','float32','float32','float32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       seq,score,index,name,width,height,top,left,bottom,right,stamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(detect, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.seq is None:
        self.seq = 0
      if self.score is None:
        self.score = 0.
      if self.index is None:
        self.index = 0
      if self.name is None:
        self.name = ''
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.top is None:
        self.top = 0.
      if self.left is None:
        self.left = 0.
      if self.bottom is None:
        self.bottom = 0.
      if self.right is None:
        self.right = 0.
      if self.stamp is None:
        self.stamp = 0
    else:
      self.seq = 0
      self.score = 0.
      self.index = 0
      self.name = ''
      self.width = 0
      self.height = 0
      self.top = 0.
      self.left = 0.
      self.bottom = 0.
      self.right = 0.
      self.stamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Ifi().pack(_x.seq, _x.score, _x.index))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i4fQ().pack(_x.width, _x.height, _x.top, _x.left, _x.bottom, _x.right, _x.stamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.seq, _x.score, _x.index,) = _get_struct_Ifi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.width, _x.height, _x.top, _x.left, _x.bottom, _x.right, _x.stamp,) = _get_struct_2i4fQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Ifi().pack(_x.seq, _x.score, _x.index))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i4fQ().pack(_x.width, _x.height, _x.top, _x.left, _x.bottom, _x.right, _x.stamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.seq, _x.score, _x.index,) = _get_struct_Ifi().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.width, _x.height, _x.top, _x.left, _x.bottom, _x.right, _x.stamp,) = _get_struct_2i4fQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i4fQ = None
def _get_struct_2i4fQ():
    global _struct_2i4fQ
    if _struct_2i4fQ is None:
        _struct_2i4fQ = struct.Struct("<2i4fQ")
    return _struct_2i4fQ
_struct_Ifi = None
def _get_struct_Ifi():
    global _struct_Ifi
    if _struct_Ifi is None:
        _struct_Ifi = struct.Struct("<Ifi")
    return _struct_Ifi
