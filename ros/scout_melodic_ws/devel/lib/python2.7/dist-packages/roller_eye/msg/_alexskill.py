# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roller_eye/alexskill.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class alexskill(genpy.Message):
  _md5sum = "1709b62875f0d4583ac2cce6d24340c8"
  _type = "roller_eye/alexskill"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#alex skill command
#0-turn left 1-turn right 2-move left 3-move right 4-move forward 
#5-move bacward 6-clockwise rotate 7-counterclockwise rotate
#error and ok
int8 ALEX_S_TURNLEFT                              = 0
int8 ALEX_S_TURNRIGHT                           = 1
int8 ALEX_S_MOVELEFT                              = 2
int8 ALEX_S_MOVERIGHT                           = 3
int8 ALEX_S_MOVEFORWARD                   = 4
int8 ALEX_S_MOVEBACKWARD                = 5
int8 ALEX_S_CLOCKWISEROTATE           = 6
int8 ALEX_S_COUNTERCLOCKROTATE = 7

uint32 cmd

#motion distance
float32 dist

#x velocity
float32 vx

#y velocity
float32 vy

#Rotationl Speed
float32 w



"""
  # Pseudo-constants
  ALEX_S_TURNLEFT = 0
  ALEX_S_TURNRIGHT = 1
  ALEX_S_MOVELEFT = 2
  ALEX_S_MOVERIGHT = 3
  ALEX_S_MOVEFORWARD = 4
  ALEX_S_MOVEBACKWARD = 5
  ALEX_S_CLOCKWISEROTATE = 6
  ALEX_S_COUNTERCLOCKROTATE = 7

  __slots__ = ['cmd','dist','vx','vy','w']
  _slot_types = ['uint32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd,dist,vx,vy,w

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(alexskill, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd is None:
        self.cmd = 0
      if self.dist is None:
        self.dist = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.w is None:
        self.w = 0.
    else:
      self.cmd = 0
      self.dist = 0.
      self.vx = 0.
      self.vy = 0.
      self.w = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I4f().pack(_x.cmd, _x.dist, _x.vx, _x.vy, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.cmd, _x.dist, _x.vx, _x.vy, _x.w,) = _get_struct_I4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I4f().pack(_x.cmd, _x.dist, _x.vx, _x.vy, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.cmd, _x.dist, _x.vx, _x.vy, _x.w,) = _get_struct_I4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I4f = None
def _get_struct_I4f():
    global _struct_I4f
    if _struct_I4f is None:
        _struct_I4f = struct.Struct("<I4f")
    return _struct_I4f
