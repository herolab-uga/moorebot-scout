// Generated by gencpp from file roller_eye/rtmp_start.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_RTMP_START_H
#define ROLLER_EYE_MESSAGE_RTMP_START_H

#include <ros/service_traits.h>


#include <roller_eye/rtmp_startRequest.h>
#include <roller_eye/rtmp_startResponse.h>


namespace roller_eye
{

struct rtmp_start
{

typedef rtmp_startRequest Request;
typedef rtmp_startResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct rtmp_start
} // namespace roller_eye


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::roller_eye::rtmp_start > {
  static const char* value()
  {
    return "4b6f77a45b623c28a4a7ea205bfd70b1";
  }

  static const char* value(const ::roller_eye::rtmp_start&) { return value(); }
};

template<>
struct DataType< ::roller_eye::rtmp_start > {
  static const char* value()
  {
    return "roller_eye/rtmp_start";
  }

  static const char* value(const ::roller_eye::rtmp_start&) { return value(); }
};


// service_traits::MD5Sum< ::roller_eye::rtmp_startRequest> should match
// service_traits::MD5Sum< ::roller_eye::rtmp_start >
template<>
struct MD5Sum< ::roller_eye::rtmp_startRequest>
{
  static const char* value()
  {
    return MD5Sum< ::roller_eye::rtmp_start >::value();
  }
  static const char* value(const ::roller_eye::rtmp_startRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::roller_eye::rtmp_startRequest> should match
// service_traits::DataType< ::roller_eye::rtmp_start >
template<>
struct DataType< ::roller_eye::rtmp_startRequest>
{
  static const char* value()
  {
    return DataType< ::roller_eye::rtmp_start >::value();
  }
  static const char* value(const ::roller_eye::rtmp_startRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::roller_eye::rtmp_startResponse> should match
// service_traits::MD5Sum< ::roller_eye::rtmp_start >
template<>
struct MD5Sum< ::roller_eye::rtmp_startResponse>
{
  static const char* value()
  {
    return MD5Sum< ::roller_eye::rtmp_start >::value();
  }
  static const char* value(const ::roller_eye::rtmp_startResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::roller_eye::rtmp_startResponse> should match
// service_traits::DataType< ::roller_eye::rtmp_start >
template<>
struct DataType< ::roller_eye::rtmp_startResponse>
{
  static const char* value()
  {
    return DataType< ::roller_eye::rtmp_start >::value();
  }
  static const char* value(const ::roller_eye::rtmp_startResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_RTMP_START_H
