// Generated by gencpp from file roller_eye/patrol_status.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_PATROL_STATUS_H
#define ROLLER_EYE_MESSAGE_PATROL_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct patrol_status_
{
  typedef patrol_status_<ContainerAllocator> Type;

  patrol_status_()
    : type(0)
    , name()  {
    }
  patrol_status_(const ContainerAllocator& _alloc)
    : type(0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START_PATROL)
  #undef START_PATROL
#endif
#if defined(_WIN32) && defined(END_PATROL)
  #undef END_PATROL
#endif
#if defined(_WIN32) && defined(PATROL_LOSE_PILE)
  #undef PATROL_LOSE_PILE
#endif
#if defined(_WIN32) && defined(PATROL_AVOID_OBS_FAIL)
  #undef PATROL_AVOID_OBS_FAIL
#endif

  enum {
    START_PATROL = 0,
    END_PATROL = 1,
    PATROL_LOSE_PILE = 2,
    PATROL_AVOID_OBS_FAIL = 3,
  };


  typedef boost::shared_ptr< ::roller_eye::patrol_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::patrol_status_<ContainerAllocator> const> ConstPtr;

}; // struct patrol_status_

typedef ::roller_eye::patrol_status_<std::allocator<void> > patrol_status;

typedef boost::shared_ptr< ::roller_eye::patrol_status > patrol_statusPtr;
typedef boost::shared_ptr< ::roller_eye::patrol_status const> patrol_statusConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::patrol_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::patrol_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::patrol_status_<ContainerAllocator1> & lhs, const ::roller_eye::patrol_status_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::patrol_status_<ContainerAllocator1> & lhs, const ::roller_eye::patrol_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::patrol_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::patrol_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::patrol_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::patrol_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::patrol_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::patrol_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::patrol_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "799344e2827d6e4c33a67d7ff2c81773";
  }

  static const char* value(const ::roller_eye::patrol_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x799344e2827d6e4cULL;
  static const uint64_t static_value2 = 0x33a67d7ff2c81773ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::patrol_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/patrol_status";
  }

  static const char* value(const ::roller_eye::patrol_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::patrol_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8  START_PATROL          = 0\n"
"int8 END_PATROL                = 1\n"
"int8 PATROL_LOSE_PILE  = 2\n"
"int8 PATROL_AVOID_OBS_FAIL  = 3\n"
"#patrol status\n"
"int32 type\n"
"\n"
"#patrol name\n"
"string name\n"
;
  }

  static const char* value(const ::roller_eye::patrol_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::patrol_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct patrol_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::patrol_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::patrol_status_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_PATROL_STATUS_H
