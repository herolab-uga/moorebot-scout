// Generated by gencpp from file roller_eye/detect.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_DETECT_H
#define ROLLER_EYE_MESSAGE_DETECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct detect_
{
  typedef detect_<ContainerAllocator> Type;

  detect_()
    : seq(0)
    , score(0.0)
    , index(0)
    , name()
    , width(0)
    , height(0)
    , top(0.0)
    , left(0.0)
    , bottom(0.0)
    , right(0.0)
    , stamp(0)  {
    }
  detect_(const ContainerAllocator& _alloc)
    : seq(0)
    , score(0.0)
    , index(0)
    , name(_alloc)
    , width(0)
    , height(0)
    , top(0.0)
    , left(0.0)
    , bottom(0.0)
    , right(0.0)
    , stamp(0)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef float _score_type;
  _score_type score;

   typedef int32_t _index_type;
  _index_type index;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef float _top_type;
  _top_type top;

   typedef float _left_type;
  _left_type left;

   typedef float _bottom_type;
  _bottom_type bottom;

   typedef float _right_type;
  _right_type right;

   typedef uint64_t _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::roller_eye::detect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::detect_<ContainerAllocator> const> ConstPtr;

}; // struct detect_

typedef ::roller_eye::detect_<std::allocator<void> > detect;

typedef boost::shared_ptr< ::roller_eye::detect > detectPtr;
typedef boost::shared_ptr< ::roller_eye::detect const> detectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::detect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::detect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::detect_<ContainerAllocator1> & lhs, const ::roller_eye::detect_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.score == rhs.score &&
    lhs.index == rhs.index &&
    lhs.name == rhs.name &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.top == rhs.top &&
    lhs.left == rhs.left &&
    lhs.bottom == rhs.bottom &&
    lhs.right == rhs.right &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::detect_<ContainerAllocator1> & lhs, const ::roller_eye::detect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::detect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::detect_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::detect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::detect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::detect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::detect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a1e00202f115f18d1fa580d7c9f1bc3";
  }

  static const char* value(const ::roller_eye::detect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a1e00202f115f18ULL;
  static const uint64_t static_value2 = 0xd1fa580d7c9f1bc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/detect";
  }

  static const char* value(const ::roller_eye::detect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::detect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#0.5: 1 nose [122.382, 483.588, 157.864, 566.004]\n"
"#0.5: 2 eye [294.182, 447.601, 339.913, 530.017]\n"
"\n"
"uint32 seq\n"
"float32 score\n"
"int32 index\n"
" #object name\n"
"string name\n"
"\n"
"#img size\n"
"int32 width\n"
"int32 height\n"
"\n"
"#the position\n"
"float32 top\n"
"float32 left\n"
"float32 bottom\n"
"float32 right\n"
"uint64 stamp\n"
;
  }

  static const char* value(const ::roller_eye::detect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::detect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.score);
      stream.next(m.index);
      stream.next(m.name);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.top);
      stream.next(m.left);
      stream.next(m.bottom);
      stream.next(m.right);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::detect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::detect_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "top: ";
    Printer<float>::stream(s, indent + "  ", v.top);
    s << indent << "left: ";
    Printer<float>::stream(s, indent + "  ", v.left);
    s << indent << "bottom: ";
    Printer<float>::stream(s, indent + "  ", v.bottom);
    s << indent << "right: ";
    Printer<float>::stream(s, indent + "  ", v.right);
    s << indent << "stamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_DETECT_H
