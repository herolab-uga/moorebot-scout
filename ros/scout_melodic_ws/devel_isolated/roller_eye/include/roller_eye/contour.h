// Generated by gencpp from file roller_eye/contour.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_CONTOUR_H
#define ROLLER_EYE_MESSAGE_CONTOUR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roller_eye/point.h>

namespace roller_eye
{
template <class ContainerAllocator>
struct contour_
{
  typedef contour_<ContainerAllocator> Type;

  contour_()
    : points()
    , inside(false)  {
    }
  contour_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , inside(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::roller_eye::point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::roller_eye::point_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef uint8_t _inside_type;
  _inside_type inside;





  typedef boost::shared_ptr< ::roller_eye::contour_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::contour_<ContainerAllocator> const> ConstPtr;

}; // struct contour_

typedef ::roller_eye::contour_<std::allocator<void> > contour;

typedef boost::shared_ptr< ::roller_eye::contour > contourPtr;
typedef boost::shared_ptr< ::roller_eye::contour const> contourConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::contour_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::contour_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::contour_<ContainerAllocator1> & lhs, const ::roller_eye::contour_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.inside == rhs.inside;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::contour_<ContainerAllocator1> & lhs, const ::roller_eye::contour_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::contour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::contour_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::contour_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::contour_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::contour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::contour_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::contour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a642c753275229829f5cad7ec8aa4996";
  }

  static const char* value(const ::roller_eye::contour_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa642c75327522982ULL;
  static const uint64_t static_value2 = 0x9f5cad7ec8aa4996ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::contour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/contour";
  }

  static const char* value(const ::roller_eye::contour_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::contour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point[] points\n"
"bool inside\n"
"================================================================================\n"
"MSG: roller_eye/point\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::roller_eye::contour_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::contour_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.inside);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct contour_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::contour_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::contour_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roller_eye::point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "inside: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inside);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_CONTOUR_H
