// Generated by gencpp from file roller_eye/frame.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_FRAME_H
#define ROLLER_EYE_MESSAGE_FRAME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct frame_
{
  typedef frame_<ContainerAllocator> Type;

  frame_()
    : seq(0)
    , stamp(0)
    , session(0)
    , type(0)
    , oseq(0)
    , par1(0)
    , par2(0)
    , par3(0)
    , par4(0)
    , data()  {
    }
  frame_(const ContainerAllocator& _alloc)
    : seq(0)
    , stamp(0)
    , session(0)
    , type(0)
    , oseq(0)
    , par1(0)
    , par2(0)
    , par3(0)
    , par4(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef uint64_t _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _session_type;
  _session_type session;

   typedef int8_t _type_type;
  _type_type type;

   typedef uint32_t _oseq_type;
  _oseq_type oseq;

   typedef int32_t _par1_type;
  _par1_type par1;

   typedef int32_t _par2_type;
  _par2_type par2;

   typedef int32_t _par3_type;
  _par3_type par3;

   typedef int32_t _par4_type;
  _par4_type par4;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _data_type;
  _data_type data;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VIDEO_STREAM_H264)
  #undef VIDEO_STREAM_H264
#endif
#if defined(_WIN32) && defined(VIDEO_STREAM_JPG)
  #undef VIDEO_STREAM_JPG
#endif
#if defined(_WIN32) && defined(AUDIO_STREAM_AAC)
  #undef AUDIO_STREAM_AAC
#endif

  enum {
    VIDEO_STREAM_H264 = 0,
    VIDEO_STREAM_JPG = 1,
    AUDIO_STREAM_AAC = 2,
  };


  typedef boost::shared_ptr< ::roller_eye::frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::frame_<ContainerAllocator> const> ConstPtr;

}; // struct frame_

typedef ::roller_eye::frame_<std::allocator<void> > frame;

typedef boost::shared_ptr< ::roller_eye::frame > framePtr;
typedef boost::shared_ptr< ::roller_eye::frame const> frameConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::frame_<ContainerAllocator1> & lhs, const ::roller_eye::frame_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.session == rhs.session &&
    lhs.type == rhs.type &&
    lhs.oseq == rhs.oseq &&
    lhs.par1 == rhs.par1 &&
    lhs.par2 == rhs.par2 &&
    lhs.par3 == rhs.par3 &&
    lhs.par4 == rhs.par4 &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::frame_<ContainerAllocator1> & lhs, const ::roller_eye::frame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::frame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::frame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bce5a3441e8f21e02d2b9d7ce432bea2";
  }

  static const char* value(const ::roller_eye::frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbce5a3441e8f21e0ULL;
  static const uint64_t static_value2 = 0x2d2b9d7ce432bea2ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/frame";
  }

  static const char* value(const ::roller_eye::frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 VIDEO_STREAM_H264=0\n"
"int8 VIDEO_STREAM_JPG=1\n"
"int8 AUDIO_STREAM_AAC=2\n"
"\n"
"#common frame for video/audio stream,compress picture\n"
"#do not use common head,define a new header\n"
"uint32 seq\n"
"uint64 stamp\n"
"uint32 session\n"
"int8 type\n"
"\n"
"# origin frame seq\n"
"uint32 oseq           \n"
"\n"
"#in video frame,par1 is width,par2 is height,par3 is key frame\n"
"#in audio  frame,par1 is sample rate,par2 is bitwidth,par3 is channels\n"
"#in file frame,par3 is frame flag:0->frame  1->eof  2->error\n"
"#par4 used to extend\n"
"int32 par1\n"
"int32 par2\n"
"int32 par3\n"
"int32 par4\n"
"\n"
"#frame data\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::roller_eye::frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.session);
      stream.next(m.type);
      stream.next(m.oseq);
      stream.next(m.par1);
      stream.next(m.par2);
      stream.next(m.par3);
      stream.next(m.par4);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::frame_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.stamp);
    s << indent << "session: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.session);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "oseq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.oseq);
    s << indent << "par1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.par1);
    s << indent << "par2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.par2);
    s << indent << "par3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.par3);
    s << indent << "par4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.par4);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_FRAME_H
