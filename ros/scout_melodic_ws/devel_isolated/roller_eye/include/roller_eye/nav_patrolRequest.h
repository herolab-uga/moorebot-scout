// Generated by gencpp from file roller_eye/nav_patrolRequest.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_NAV_PATROLREQUEST_H
#define ROLLER_EYE_MESSAGE_NAV_PATROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct nav_patrolRequest_
{
  typedef nav_patrolRequest_<ContainerAllocator> Type;

  nav_patrolRequest_()
    : isFromOutStart(0)
    , name()  {
    }
  nav_patrolRequest_(const ContainerAllocator& _alloc)
    : isFromOutStart(0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _isFromOutStart_type;
  _isFromOutStart_type isFromOutStart;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::roller_eye::nav_patrolRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::nav_patrolRequest_<ContainerAllocator> const> ConstPtr;

}; // struct nav_patrolRequest_

typedef ::roller_eye::nav_patrolRequest_<std::allocator<void> > nav_patrolRequest;

typedef boost::shared_ptr< ::roller_eye::nav_patrolRequest > nav_patrolRequestPtr;
typedef boost::shared_ptr< ::roller_eye::nav_patrolRequest const> nav_patrolRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::nav_patrolRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::nav_patrolRequest_<ContainerAllocator1> & lhs, const ::roller_eye::nav_patrolRequest_<ContainerAllocator2> & rhs)
{
  return lhs.isFromOutStart == rhs.isFromOutStart &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::nav_patrolRequest_<ContainerAllocator1> & lhs, const ::roller_eye::nav_patrolRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::nav_patrolRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::nav_patrolRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::nav_patrolRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c9f7c0536edb947c8a33193074afe9e";
  }

  static const char* value(const ::roller_eye::nav_patrolRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c9f7c0536edb947ULL;
  static const uint64_t static_value2 = 0xc8a33193074afe9eULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/nav_patrolRequest";
  }

  static const char* value(const ::roller_eye::nav_patrolRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#0-no, 1-yes\n"
"int8     isFromOutStart\n"
"string name\n"
;
  }

  static const char* value(const ::roller_eye::nav_patrolRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isFromOutStart);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nav_patrolRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::nav_patrolRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::nav_patrolRequest_<ContainerAllocator>& v)
  {
    s << indent << "isFromOutStart: ";
    Printer<int8_t>::stream(s, indent + "  ", v.isFromOutStart);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_NAV_PATROLREQUEST_H
