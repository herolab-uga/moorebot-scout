// Generated by gencpp from file roller_eye/record_startResponse.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_RECORD_STARTRESPONSE_H
#define ROLLER_EYE_MESSAGE_RECORD_STARTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct record_startResponse_
{
  typedef record_startResponse_<ContainerAllocator> Type;

  record_startResponse_()
    : status(0)
    , id()  {
    }
  record_startResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::roller_eye::record_startResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::record_startResponse_<ContainerAllocator> const> ConstPtr;

}; // struct record_startResponse_

typedef ::roller_eye::record_startResponse_<std::allocator<void> > record_startResponse;

typedef boost::shared_ptr< ::roller_eye::record_startResponse > record_startResponsePtr;
typedef boost::shared_ptr< ::roller_eye::record_startResponse const> record_startResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::record_startResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::record_startResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::record_startResponse_<ContainerAllocator1> & lhs, const ::roller_eye::record_startResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::record_startResponse_<ContainerAllocator1> & lhs, const ::roller_eye::record_startResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::record_startResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::record_startResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::record_startResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::record_startResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::record_startResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::record_startResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::record_startResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfdce64456678b34b137e07ebac633cf";
  }

  static const char* value(const ::roller_eye::record_startResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfdce64456678b34ULL;
  static const uint64_t static_value2 = 0xb137e07ebac633cfULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::record_startResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/record_startResponse";
  }

  static const char* value(const ::roller_eye::record_startResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::record_startResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 status\n"
"#the id is used to indicate the record file\n"
"string id\n"
"\n"
;
  }

  static const char* value(const ::roller_eye::record_startResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::record_startResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct record_startResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::record_startResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::record_startResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_RECORD_STARTRESPONSE_H
