// Generated by gencpp from file roller_eye/sched_add_modRequest.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_SCHED_ADD_MODREQUEST_H
#define ROLLER_EYE_MESSAGE_SCHED_ADD_MODREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roller_eye/task.h>

namespace roller_eye
{
template <class ContainerAllocator>
struct sched_add_modRequest_
{
  typedef sched_add_modRequest_<ContainerAllocator> Type;

  sched_add_modRequest_()
    : tsk()  {
    }
  sched_add_modRequest_(const ContainerAllocator& _alloc)
    : tsk(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roller_eye::task_<ContainerAllocator>  _tsk_type;
  _tsk_type tsk;





  typedef boost::shared_ptr< ::roller_eye::sched_add_modRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::sched_add_modRequest_<ContainerAllocator> const> ConstPtr;

}; // struct sched_add_modRequest_

typedef ::roller_eye::sched_add_modRequest_<std::allocator<void> > sched_add_modRequest;

typedef boost::shared_ptr< ::roller_eye::sched_add_modRequest > sched_add_modRequestPtr;
typedef boost::shared_ptr< ::roller_eye::sched_add_modRequest const> sched_add_modRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::sched_add_modRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::sched_add_modRequest_<ContainerAllocator1> & lhs, const ::roller_eye::sched_add_modRequest_<ContainerAllocator2> & rhs)
{
  return lhs.tsk == rhs.tsk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::sched_add_modRequest_<ContainerAllocator1> & lhs, const ::roller_eye::sched_add_modRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::sched_add_modRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::sched_add_modRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::sched_add_modRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc1faf861ce145533cfd6c3511ccd1dd";
  }

  static const char* value(const ::roller_eye::sched_add_modRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc1faf861ce14553ULL;
  static const uint64_t static_value2 = 0x3cfd6c3511ccd1ddULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/sched_add_modRequest";
  }

  static const char* value(const ::roller_eye::sched_add_modRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task tsk\n"
"\n"
"================================================================================\n"
"MSG: roller_eye/task\n"
"int32 id\n"
"string name\n"
"string type\n"
"int8 repeateType\n"
"int8[] repeateDays\n"
"int32 timeYear\n"
"int8 timeMonth\n"
"int8 timeDay\n"
"int8 timeHour\n"
"int8 timeMinute\n"
"int8 timeSecond\n"
"int32 expire\n"
"string param\n"
"bool notice\n"
"bool active\n"
;
  }

  static const char* value(const ::roller_eye::sched_add_modRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tsk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sched_add_modRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::sched_add_modRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::sched_add_modRequest_<ContainerAllocator>& v)
  {
    s << indent << "tsk: ";
    s << std::endl;
    Printer< ::roller_eye::task_<ContainerAllocator> >::stream(s, indent + "  ", v.tsk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_SCHED_ADD_MODREQUEST_H
