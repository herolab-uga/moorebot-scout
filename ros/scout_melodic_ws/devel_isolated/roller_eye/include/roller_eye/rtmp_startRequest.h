// Generated by gencpp from file roller_eye/rtmp_startRequest.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_RTMP_STARTREQUEST_H
#define ROLLER_EYE_MESSAGE_RTMP_STARTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct rtmp_startRequest_
{
  typedef rtmp_startRequest_<ContainerAllocator> Type;

  rtmp_startRequest_()
    : app()
    , name()
    , cache(false)
    , live(false)
    , duration(0)
    , flags(0)  {
    }
  rtmp_startRequest_(const ContainerAllocator& _alloc)
    : app(_alloc)
    , name(_alloc)
    , cache(false)
    , live(false)
    , duration(0)
    , flags(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _app_type;
  _app_type app;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _cache_type;
  _cache_type cache;

   typedef uint8_t _live_type;
  _live_type live;

   typedef int32_t _duration_type;
  _duration_type duration;

   typedef uint32_t _flags_type;
  _flags_type flags;





  typedef boost::shared_ptr< ::roller_eye::rtmp_startRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::rtmp_startRequest_<ContainerAllocator> const> ConstPtr;

}; // struct rtmp_startRequest_

typedef ::roller_eye::rtmp_startRequest_<std::allocator<void> > rtmp_startRequest;

typedef boost::shared_ptr< ::roller_eye::rtmp_startRequest > rtmp_startRequestPtr;
typedef boost::shared_ptr< ::roller_eye::rtmp_startRequest const> rtmp_startRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::rtmp_startRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::rtmp_startRequest_<ContainerAllocator1> & lhs, const ::roller_eye::rtmp_startRequest_<ContainerAllocator2> & rhs)
{
  return lhs.app == rhs.app &&
    lhs.name == rhs.name &&
    lhs.cache == rhs.cache &&
    lhs.live == rhs.live &&
    lhs.duration == rhs.duration &&
    lhs.flags == rhs.flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::rtmp_startRequest_<ContainerAllocator1> & lhs, const ::roller_eye::rtmp_startRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::rtmp_startRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::rtmp_startRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::rtmp_startRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f22c5479b3d7b4ca1403e2e50fb3a152";
  }

  static const char* value(const ::roller_eye::rtmp_startRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf22c5479b3d7b4caULL;
  static const uint64_t static_value2 = 0x1403e2e50fb3a152ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/rtmp_startRequest";
  }

  static const char* value(const ::roller_eye::rtmp_startRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#value is \"live\" or \"monitor\",when set \"monitor\" the server will record the data\n"
"string app\n"
"#stream name\n"
"string name\n"
"#need to be cached in local\n"
"bool cache\n"
"#need to open the camera,if false the video data will load from local cache\n"
"bool live\n"
"#the duration of the stream\n"
"int32 duration\n"
"#av flag\n"
"uint32 flags\n"
;
  }

  static const char* value(const ::roller_eye::rtmp_startRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.app);
      stream.next(m.name);
      stream.next(m.cache);
      stream.next(m.live);
      stream.next(m.duration);
      stream.next(m.flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rtmp_startRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::rtmp_startRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::rtmp_startRequest_<ContainerAllocator>& v)
  {
    s << indent << "app: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.app);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "cache: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cache);
    s << indent << "live: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.live);
    s << indent << "duration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duration);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_RTMP_STARTREQUEST_H
