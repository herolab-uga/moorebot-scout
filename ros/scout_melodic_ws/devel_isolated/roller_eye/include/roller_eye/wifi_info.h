// Generated by gencpp from file roller_eye/wifi_info.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_WIFI_INFO_H
#define ROLLER_EYE_MESSAGE_WIFI_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct wifi_info_
{
  typedef wifi_info_<ContainerAllocator> Type;

  wifi_info_()
    : ssid()
    , quality(0.0)
    , signal(0)
    , noisy(0)
    , freq(0.0)
    , channel(0)  {
    }
  wifi_info_(const ContainerAllocator& _alloc)
    : ssid(_alloc)
    , quality(0.0)
    , signal(0)
    , noisy(0)
    , freq(0.0)
    , channel(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ssid_type;
  _ssid_type ssid;

   typedef float _quality_type;
  _quality_type quality;

   typedef int32_t _signal_type;
  _signal_type signal;

   typedef int32_t _noisy_type;
  _noisy_type noisy;

   typedef float _freq_type;
  _freq_type freq;

   typedef int32_t _channel_type;
  _channel_type channel;





  typedef boost::shared_ptr< ::roller_eye::wifi_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::wifi_info_<ContainerAllocator> const> ConstPtr;

}; // struct wifi_info_

typedef ::roller_eye::wifi_info_<std::allocator<void> > wifi_info;

typedef boost::shared_ptr< ::roller_eye::wifi_info > wifi_infoPtr;
typedef boost::shared_ptr< ::roller_eye::wifi_info const> wifi_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::wifi_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::wifi_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::wifi_info_<ContainerAllocator1> & lhs, const ::roller_eye::wifi_info_<ContainerAllocator2> & rhs)
{
  return lhs.ssid == rhs.ssid &&
    lhs.quality == rhs.quality &&
    lhs.signal == rhs.signal &&
    lhs.noisy == rhs.noisy &&
    lhs.freq == rhs.freq &&
    lhs.channel == rhs.channel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::wifi_info_<ContainerAllocator1> & lhs, const ::roller_eye::wifi_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::wifi_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::wifi_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::wifi_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::wifi_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::wifi_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::wifi_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::wifi_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fb5b560bac4c87ce2cb6e8e897ae350";
  }

  static const char* value(const ::roller_eye::wifi_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fb5b560bac4c87cULL;
  static const uint64_t static_value2 = 0xe2cb6e8e897ae350ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::wifi_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/wifi_info";
  }

  static const char* value(const ::roller_eye::wifi_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::wifi_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ssid\n"
"float32 quality\n"
"int32 signal\n"
"int32 noisy\n"
"float32 freq\n"
"int32 channel\n"
;
  }

  static const char* value(const ::roller_eye::wifi_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::wifi_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ssid);
      stream.next(m.quality);
      stream.next(m.signal);
      stream.next(m.noisy);
      stream.next(m.freq);
      stream.next(m.channel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wifi_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::wifi_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::wifi_info_<ContainerAllocator>& v)
  {
    s << indent << "ssid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ssid);
    s << indent << "quality: ";
    Printer<float>::stream(s, indent + "  ", v.quality);
    s << indent << "signal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal);
    s << indent << "noisy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.noisy);
    s << indent << "freq: ";
    Printer<float>::stream(s, indent + "  ", v.freq);
    s << indent << "channel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.channel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_WIFI_INFO_H
