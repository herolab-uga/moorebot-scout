// Generated by gencpp from file roller_eye/task.msg
// DO NOT EDIT!


#ifndef ROLLER_EYE_MESSAGE_TASK_H
#define ROLLER_EYE_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roller_eye
{
template <class ContainerAllocator>
struct task_
{
  typedef task_<ContainerAllocator> Type;

  task_()
    : id(0)
    , name()
    , type()
    , repeateType(0)
    , repeateDays()
    , timeYear(0)
    , timeMonth(0)
    , timeDay(0)
    , timeHour(0)
    , timeMinute(0)
    , timeSecond(0)
    , expire(0)
    , param()
    , notice(false)
    , active(false)  {
    }
  task_(const ContainerAllocator& _alloc)
    : id(0)
    , name(_alloc)
    , type(_alloc)
    , repeateType(0)
    , repeateDays(_alloc)
    , timeYear(0)
    , timeMonth(0)
    , timeDay(0)
    , timeHour(0)
    , timeMinute(0)
    , timeSecond(0)
    , expire(0)
    , param(_alloc)
    , notice(false)
    , active(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef int8_t _repeateType_type;
  _repeateType_type repeateType;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _repeateDays_type;
  _repeateDays_type repeateDays;

   typedef int32_t _timeYear_type;
  _timeYear_type timeYear;

   typedef int8_t _timeMonth_type;
  _timeMonth_type timeMonth;

   typedef int8_t _timeDay_type;
  _timeDay_type timeDay;

   typedef int8_t _timeHour_type;
  _timeHour_type timeHour;

   typedef int8_t _timeMinute_type;
  _timeMinute_type timeMinute;

   typedef int8_t _timeSecond_type;
  _timeSecond_type timeSecond;

   typedef int32_t _expire_type;
  _expire_type expire;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _param_type;
  _param_type param;

   typedef uint8_t _notice_type;
  _notice_type notice;

   typedef uint8_t _active_type;
  _active_type active;





  typedef boost::shared_ptr< ::roller_eye::task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roller_eye::task_<ContainerAllocator> const> ConstPtr;

}; // struct task_

typedef ::roller_eye::task_<std::allocator<void> > task;

typedef boost::shared_ptr< ::roller_eye::task > taskPtr;
typedef boost::shared_ptr< ::roller_eye::task const> taskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roller_eye::task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roller_eye::task_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roller_eye::task_<ContainerAllocator1> & lhs, const ::roller_eye::task_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.type == rhs.type &&
    lhs.repeateType == rhs.repeateType &&
    lhs.repeateDays == rhs.repeateDays &&
    lhs.timeYear == rhs.timeYear &&
    lhs.timeMonth == rhs.timeMonth &&
    lhs.timeDay == rhs.timeDay &&
    lhs.timeHour == rhs.timeHour &&
    lhs.timeMinute == rhs.timeMinute &&
    lhs.timeSecond == rhs.timeSecond &&
    lhs.expire == rhs.expire &&
    lhs.param == rhs.param &&
    lhs.notice == rhs.notice &&
    lhs.active == rhs.active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roller_eye::task_<ContainerAllocator1> & lhs, const ::roller_eye::task_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roller_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roller_eye::task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roller_eye::task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roller_eye::task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roller_eye::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9830df15a89026240f987f0f60f06f98";
  }

  static const char* value(const ::roller_eye::task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9830df15a8902624ULL;
  static const uint64_t static_value2 = 0x0f987f0f60f06f98ULL;
};

template<class ContainerAllocator>
struct DataType< ::roller_eye::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roller_eye/task";
  }

  static const char* value(const ::roller_eye::task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roller_eye::task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"string name\n"
"string type\n"
"int8 repeateType\n"
"int8[] repeateDays\n"
"int32 timeYear\n"
"int8 timeMonth\n"
"int8 timeDay\n"
"int8 timeHour\n"
"int8 timeMinute\n"
"int8 timeSecond\n"
"int32 expire\n"
"string param\n"
"bool notice\n"
"bool active\n"
;
  }

  static const char* value(const ::roller_eye::task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roller_eye::task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.repeateType);
      stream.next(m.repeateDays);
      stream.next(m.timeYear);
      stream.next(m.timeMonth);
      stream.next(m.timeDay);
      stream.next(m.timeHour);
      stream.next(m.timeMinute);
      stream.next(m.timeSecond);
      stream.next(m.expire);
      stream.next(m.param);
      stream.next(m.notice);
      stream.next(m.active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roller_eye::task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roller_eye::task_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "repeateType: ";
    Printer<int8_t>::stream(s, indent + "  ", v.repeateType);
    s << indent << "repeateDays[]" << std::endl;
    for (size_t i = 0; i < v.repeateDays.size(); ++i)
    {
      s << indent << "  repeateDays[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.repeateDays[i]);
    }
    s << indent << "timeYear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeYear);
    s << indent << "timeMonth: ";
    Printer<int8_t>::stream(s, indent + "  ", v.timeMonth);
    s << indent << "timeDay: ";
    Printer<int8_t>::stream(s, indent + "  ", v.timeDay);
    s << indent << "timeHour: ";
    Printer<int8_t>::stream(s, indent + "  ", v.timeHour);
    s << indent << "timeMinute: ";
    Printer<int8_t>::stream(s, indent + "  ", v.timeMinute);
    s << indent << "timeSecond: ";
    Printer<int8_t>::stream(s, indent + "  ", v.timeSecond);
    s << indent << "expire: ";
    Printer<int32_t>::stream(s, indent + "  ", v.expire);
    s << indent << "param: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.param);
    s << indent << "notice: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.notice);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLLER_EYE_MESSAGE_TASK_H
