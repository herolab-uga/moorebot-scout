# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roller_eye/wifi_info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class wifi_info(genpy.Message):
  _md5sum = "8fb5b560bac4c87ce2cb6e8e897ae350"
  _type = "roller_eye/wifi_info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string ssid
float32 quality
int32 signal
int32 noisy
float32 freq
int32 channel"""
  __slots__ = ['ssid','quality','signal','noisy','freq','channel']
  _slot_types = ['string','float32','int32','int32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ssid,quality,signal,noisy,freq,channel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(wifi_info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ssid is None:
        self.ssid = ''
      if self.quality is None:
        self.quality = 0.
      if self.signal is None:
        self.signal = 0
      if self.noisy is None:
        self.noisy = 0
      if self.freq is None:
        self.freq = 0.
      if self.channel is None:
        self.channel = 0
    else:
      self.ssid = ''
      self.quality = 0.
      self.signal = 0
      self.noisy = 0
      self.freq = 0.
      self.channel = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ssid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f2ifi().pack(_x.quality, _x.signal, _x.noisy, _x.freq, _x.channel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ssid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ssid = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.quality, _x.signal, _x.noisy, _x.freq, _x.channel,) = _get_struct_f2ifi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ssid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f2ifi().pack(_x.quality, _x.signal, _x.noisy, _x.freq, _x.channel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ssid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ssid = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.quality, _x.signal, _x.noisy, _x.freq, _x.channel,) = _get_struct_f2ifi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f2ifi = None
def _get_struct_f2ifi():
    global _struct_f2ifi
    if _struct_f2ifi is None:
        _struct_f2ifi = struct.Struct("<f2ifi")
    return _struct_f2ifi
