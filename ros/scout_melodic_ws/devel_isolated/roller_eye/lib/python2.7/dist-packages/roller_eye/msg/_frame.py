# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roller_eye/frame.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class frame(genpy.Message):
  _md5sum = "bce5a3441e8f21e02d2b9d7ce432bea2"
  _type = "roller_eye/frame"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 VIDEO_STREAM_H264=0
int8 VIDEO_STREAM_JPG=1
int8 AUDIO_STREAM_AAC=2

#common frame for video/audio stream,compress picture
#do not use common head,define a new header
uint32 seq
uint64 stamp
uint32 session
int8 type

# origin frame seq
uint32 oseq           

#in video frame,par1 is width,par2 is height,par3 is key frame
#in audio  frame,par1 is sample rate,par2 is bitwidth,par3 is channels
#in file frame,par3 is frame flag:0->frame  1->eof  2->error
#par4 used to extend
int32 par1
int32 par2
int32 par3
int32 par4

#frame data
uint8[] data
"""
  # Pseudo-constants
  VIDEO_STREAM_H264 = 0
  VIDEO_STREAM_JPG = 1
  AUDIO_STREAM_AAC = 2

  __slots__ = ['seq','stamp','session','type','oseq','par1','par2','par3','par4','data']
  _slot_types = ['uint32','uint64','uint32','int8','uint32','int32','int32','int32','int32','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       seq,stamp,session,type,oseq,par1,par2,par3,par4,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(frame, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.seq is None:
        self.seq = 0
      if self.stamp is None:
        self.stamp = 0
      if self.session is None:
        self.session = 0
      if self.type is None:
        self.type = 0
      if self.oseq is None:
        self.oseq = 0
      if self.par1 is None:
        self.par1 = 0
      if self.par2 is None:
        self.par2 = 0
      if self.par3 is None:
        self.par3 = 0
      if self.par4 is None:
        self.par4 = 0
      if self.data is None:
        self.data = b''
    else:
      self.seq = 0
      self.stamp = 0
      self.session = 0
      self.type = 0
      self.oseq = 0
      self.par1 = 0
      self.par2 = 0
      self.par3 = 0
      self.par4 = 0
      self.data = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IQIbI4i().pack(_x.seq, _x.stamp, _x.session, _x.type, _x.oseq, _x.par1, _x.par2, _x.par3, _x.par4))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.seq, _x.stamp, _x.session, _x.type, _x.oseq, _x.par1, _x.par2, _x.par3, _x.par4,) = _get_struct_IQIbI4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IQIbI4i().pack(_x.seq, _x.stamp, _x.session, _x.type, _x.oseq, _x.par1, _x.par2, _x.par3, _x.par4))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.seq, _x.stamp, _x.session, _x.type, _x.oseq, _x.par1, _x.par2, _x.par3, _x.par4,) = _get_struct_IQIbI4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IQIbI4i = None
def _get_struct_IQIbI4i():
    global _struct_IQIbI4i
    if _struct_IQIbI4i is None:
        _struct_IQIbI4i = struct.Struct("<IQIbI4i")
    return _struct_IQIbI4i
